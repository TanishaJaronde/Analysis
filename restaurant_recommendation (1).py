# -*- coding: utf-8 -*-
"""Restaurant Recommendation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ee7Kq80TcSsSiWb7KJ5c0JhLk6BbL2Ie
"""

import numpy as np
import pandas as pd
import seaborn as sb
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import r2_score
import warnings
warnings.filterwarnings('always')
warnings.filterwarnings('ignore')
import re
from nltk.corpus import stopwords
from sklearn.metrics.pairwise import linear_kernel
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer

from sklearn.feature_extraction.text import CountVectorizer

train_df = pd.read_csv('/content/Dataset  (3).csv')
train_df

print(train_df.columns.values)

train_df.head(10)

sns.countplot(y = 'Currency',data = train_df)
sns.set(rc = {'figure.figsize' : (35,5)})

common_ing = []
for x in np.arange(len(train_df['Restaurant Name'])):
  for i in train_df['City'][x].split(','):
    common_ing.append(i.strip())
common_ing = pd.DataFrame(common_ing, columns=['common_ing'])

common_ing['common_ing'].value_counts().head(10)

count_vec = CountVectorizer(tokenizer=lambda x: [i.strip() for i in x.split(',')], lowercase=False)
x_train_counts = count_vec.fit_transform(train_df['City'])
x_train_counts.shape

from sklearn.feature_extraction.text import TfidfTransformer
tf_transformer = TfidfTransformer(use_idf=False).fit(x_train_counts)
x_train_tf = tf_transformer.transform(x_train_counts)
x_train_tf.shape

from sklearn.linear_model import SGDClassifier
from sklearn.pipeline import Pipeline

text_clf = Pipeline([('vect', CountVectorizer(tokenizer=lambda x: [i.strip() for i in x.split(',')], lowercase=False)),('clf', SGDClassifier(loss='hinge', penalty='l2',alpha=1e-3, random_state=42,max_iter=5, tol=None)),])
text_tdif_clf = Pipeline([('vect', CountVectorizer(tokenizer=lambda x: [i.strip() for i in x.split(',')], lowercase=False)),('tfidf', TfidfTransformer()),('clf', SGDClassifier(loss='hinge', penalty='l2',alpha=1e-3, random_state=42,max_iter=5, tol=None)),])

text_tdif_clf.fit(train_df['City'], train_df['Restaurant Name'])

predicted = text_tdif_clf.predict(train_df['City'])
np.mean(predicted == train_df['Restaurant Name'])

from sklearn import metrics

print(metrics.classification_report(train_df['Restaurant Name'],predicted))